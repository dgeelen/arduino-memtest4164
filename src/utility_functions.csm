/******************************************************************************



 ******************************************************************************/
#pragma once

#include "utility_macros.csm"

/**
 * loads zeros into every register
 */
#define initialise_registers() DEF_LABELED(initialise_registers,              $\
	clr    ZH                                                                   $\
	ldi    ZL, 0x1d /* 0x1d = YH */                                             $\
__initialise_registers:                                                       $\
	st     Z, ZH                                                                $\
	dec    ZL                                                                   $\
	brne   __initialise_registers                                               $\
	                                                                            $\
	; r00 is always 0x00                                                        $\
	; r01 is always 0x01                                                        $\
	; r02 is always 0xff                                                        $\
	clr    r00 ; skipped by the above loop...                                   $\
	inc    r01                                                                  $\
	dec    r02                                                                  $\
)



/**
 * Blinks the built-in LED (on D13) a the specified rate forever.
 * Interrupts are disabled.
 */
DEF_LABELED(_debug_break,                                                     $\
	; Don't allow us to be interrupted by any interrupts, since they may be     $\
	; part of any problem we're trying to investigate.                          $\
	cli                                                                         $\
	                                                                            $\
	; We are interested in the LED on D13, i.e. PORTB.5                         $\
	ldi   r24, 0b00100000 ; bit 5                                               $\
	                                                                            $\
	; This sets bit 5 of PORTB as output                                        $\
	in    r25, DDRB                                                             $\
	or    r25, r24                                                              $\
	out   DDRB, r25       ; Set DDRB to output                                  $\
	                                                                            $\
debug_break_toggle:                                                           $\
	; Toggle the state of the output from high/low                              $\
	in    r25, PORTB                                                            $\
	eor   r25, r24                                                              $\
	out   PORTB, r25      ; Set LED pin to output                               $\
	                             ; cycles:  Total:                              $\
	eor   zh, zh                 ;      1       1                               $\
	eor   zl, zl                 ;      1       2                               $\
	mov   r25, r16               ;      1       3                               $\
debug_break_wait:                                                             $\
	sub   zl, r01                ;      1       4                               $\
	sbc   zh, r00                ;      1       5                               $\
	brne  debug_break_wait       ;    1/2       5 + 65534*2 + 1 = 131074        $\
	dec   r25                    ;                                              $\
	brne  debug_break_wait                                                      $\
	jmp   debug_break_toggle                                                    $\
)
#define debug_break(interval)                                                 $\
	ldi   r16, interval                                                         $\
	jmp   _debug_break                                                          $\
// debug_break
