/******************************************************************************

   Driver for m4164 memory chips

   Standard layout:

          ____________
         |    \__/    |
   N.C.  |  1      16 |  Vss
   Din   |  2      15 | ~CAS
  ~WE    |  3      14 |  Dout
  ~RAS   |  4      13 |  A6
   A0    |  5      12 |  A3
   A2    |  6      11 |  A4
   A1    |  7      10 |  A5
   Vcc   |  8       9 |  A7
         |____________|


   The library will use PORTD as the address lines, and PORTB for the control
   lines.

   It is  the user's responsibility to call the DRAM refresh handler at least
   once every 2ms. Two functions are provided:
    * m4164_dram_refresh
    * m4164_interrupt_handler_dram_refresh
   It is up to the user to decide which to use. Each function will refresh all
   rows using RAS only refresh. Per row refresh (e.g. on a 15.625us timer) is
   not used because of CPU overhead.

   Due to limitations in the AVR instruction set, which doesn't support
   indexed access to certain I/O registers (those requiring in/out intructions
   to access), the library will assume that you have connected the address
   lines (A0..A7) to Port D, and the control pins (Din, Dout, WE, RAS, CAS) to
   Port B. While it would obviously be technically possible to work around
   this limitation, I feel that in practice it would add too much overhead.
   You can however still configure which bit in Port B controls which line.

 ******************************************************************************/
#pragma once
#include "utility_macros.csm"
#include "libc.csm"
#include "string_constant.csm"

; Tell the library about your connections:
;
; struct m4164_config {
; 	char row_count;       // How many rows in this memory (typ. 128)
; 	char WE_mask;
; 	char Din_mask;        // I.e. 1<<Din_bit
; 	char Dout_mask;
; 	char CAS_mask;
; 	char RAS_mask;
.set m4164_config_row_count    = 0
.set m4164_config_WE_mask      = m4164_config_row_count + 1
.set m4164_config_Din_mask     = m4164_config_WE_mask   + 1
.set m4164_config_Dout_mask    = m4164_config_Din_mask  + 1
.set m4164_config_CAS_mask     = m4164_config_Dout_mask + 1
.set m4164_config_RAS_mask     = m4164_config_CAS_mask  + 1
; }
.set struct_m4164_config_size  = m4164_config_WE_mask + 1
;
.dseg
__m4164_config: .byte 2
.cseg


; z = m4164_config*
; Configures driver and runs the initialisation sequence of the memory chip,
; i.e. wait >200us and give 8 RAS cycles.
DEF_LABELED(m4164_init,                                                       $\
	save_registers(xl, xh, r23)                                                 $\
	                                                                            $\
	; XXX: set data directions arduino ports                                    $\
	                                                                            $\
	                                                                            $\
	sts    __m4164_config+1, zl                                                 $\
	sts    __m4164_config+0, zh                                                 $\
	                                                                            $\
	mov    r24, r00    ; all pins that we want to set                           $\
	mov    xl, r00     ; xl is mask of all used pins                            $\
	                                                                            $\
	ldd    r25, z+m4164_config_Din_mask                                         $\
	or     xl, r25                                                              $\
	                                                                            $\
	ldd    r25, z+m4164_config_Dout_mask                                        $\
	or     xl, r25                                                              $\
	                                                                            $\
	ldd    r25, z+m4164_config_WE_mask ; WE is active low                       $\
	or     r24, r25                                                             $\
	or     xl, r25                                                              $\
	                                                                            $\
	ldd    r25, z+m4164_config_CAS_mask ; CAS is active low                     $\
	or     r24, r25                                                             $\
	or     xl, r25                                                              $\
	                                                                            $\
	ldd    r25, z+m4164_config_RAS_mask ; RAS is active low                     $\
	or     r24, r25                                                             $\
	or     xl, r25                                                              $\
	                                                                            $\
	; disable interrupts, in case the user calls us after SEI, because          $\
	; otherwise we wont be able to guarantee that RAS is held low for the       $\
	; correct minimum amount of time.                                           $\
	in     r23, SREG  ; store state of IE flag                                  $\
	cli                                                                         $\
	                                                                            $\
	; r24 = bits to set, xl = bits used                                         $\
	out    PORTD, r00                                                           $\
	in     r25, PORTB  ; get current state /* XXX: quantum collapse simavr? */  $\
	eor    xl, r02     ; xl = bits *not* used                                   $\
	and    r25, xl     ; clear all used bits                                    $\
	or     r25, r24    ; set bits that need to be set                           $\
	out    PORTB, r25  ; update                                                 $\
	                                                                            $\
	; wait a bit for things to settle                                           $\
	; I.e. the initial 200us (3200 cycles) pause                                $\
	ldi    xl, low(3200)                                                        $\
	ldi    xh, high(3200)                                                       $\
__m4164_initial_pause:                                                        $\
	sbiw   xl, 3      ; sub + brne = 3 cycles                                   $\
	brne   __m4164_initial_pause                                                $\
	                                                                            $\
	; issue 8 RAS cycles                                                        $\
	ldd    xl, z+m4164_config_RAS_mask                                          $\
	ldi    r24, 8                                                               $\
__m4164_init_RAS:                                                             $\
	; Tasr (row address setup time) = 0ns, so we can 'immediately' assert RAS   $\
	eor    r25, xl     ; clear RAS bit in state                                 $\
	out    PORTB, r25  ; assert RAS                                             $\
	; Tras (RAS pulse width) width is 150ns (2.4 cycles)                        $\
	eor    r25, xl     ; set RAS bit in state                           /* 1 */ $\
	dec    r24                                                          /* 2 */ $\
	breq   __m4164_init_RAS_done                                        /* 3 */ $\
	out    PORTB, r25  ; disable RAS                                            $\
	; Trp (RAS precharge time) is 100ns (1.6 cycles)                            $\
	rjmp   __m4164_init_RAS                                             /* 2 */ $\
__m4164_init_RAS_done:                                                        $\
	out    PORTB, r25  ; disable RAS (r25 is set in loop)                       $\
	; technically we should now wait for Trp (100ns/1.6 cycles)                 $\
	out    SREG, r23   ; restore IE flag (next instruction is still executed)   $\
	nop                ; 2nd wait cycle                                         $\
	                                                                            $\
	                                                                            $\
	restore_registers(xl, xh, r23)                                              $\
	ret                                                                         $\
)

; z = address
; bit in r16
DEF_LABELED(m4164_dram_write_bit,                                             $\
	cp     r00, r16                                                             $\
	; fall-through intentional                                                  $\
)

; z = address
; bit in carry
DEF_LABELED(m4164_dram_write_bit_c,                                           $\
	save_registers(r20, r21, r22, r23, yl, yh)                                  $\
	                                                                            $\
	lds    yl, __m4164_config+1                                                 $\
	lds    yh, __m4164_config+0                                                 $\
	ldd    r20, y+m4164_config_CAS_mask                                         $\
	ldd    r21, y+m4164_config_RAS_mask                                         $\
	ldd    r22, y+m4164_config_WE_mask                                          $\
	ldd    r25, y+m4164_config_Din_mask                                         $\
	                                                                            $\
	; set up state                                                              $\
	; the first thing we will do is assert ~RAS, so we dont include it in the   $\
	; set up here. Simultaneously with RAS we will assert ~WE.                  $\
	; bits that need to be set are:                                             $\
	;  - Din                                                                    $\
	;  - CAS                                                                    $\
	; r24 will be the (initial) state                                           $\
	out    PORTD, zh   ; set row address                                        $\
	in     r23, SREG   ; store state of IE flag                                 $\
	cli                ; prevent interrupt from messing with addresses          $\
	in     r24, PORTB  ; get current state (will have CAS set)                  $\
	or     r24, r25    ; set Din                                                $\
	brcs   __m4164_dram_write_bit_1                                             $\
	eor    r24, r25    ; clear Din                                              $\
__m4164_dram_write_bit_1:                                                     $\
	eor    r24, r21    ; assert RAS                                             $\
	eor    r24, r22    ; assert WE                                              $\
	                                                                            $\
	; strobe row address                                                        $\
	; Tasr (row address setup time) = 0ns, so we can 'immediately' assert RAS   $\
	; WE and RAS bits are already clear in state                                $\
	out    PORTB, r24  ; assert RAS, WE                                         $\
	; Tras (RAS pulse width) width is 150ns (2.4 cycles)              /* RAS */ $\
	; Trah (row address hold time) is 15ns (0.24 cycles)                        $\
	; strobe column address (interleave RAS)                                    $\
	; Tcas (CAS pulse width) is 75ns (1.2 cycles)                               $\
	; Tcpn (CAS precharge time non-page) is 25ns                                $\
	; Trcd (RAS to CAS delay) is 25 < n < 75ns (non-normative)                  $\
	eor    r24, r20    ; clear CAS bit (covers Trah)                  /*   1 */ $\
	out    PORTD, zl   ; Set column addr, Tasc is 0ns, Tcah is 20ns   /*   3 */ $\
	out    PORTB, r24  ; assert CAS                       /* CAS */   /*   3 */ $\
	or     r24, r20    ; set RAS bit                      /*   1 */             $\
	or     r24, r21    ; set CAS bit                      /*   2 */             $\
	or     r24, r22    ; set WE bit (de-assert WE)                              $\
	out    SREG, r23   ; restore IE flag (next instruction is still executed)   $\
	out    PORTB, r24  ; disable RAS, CAS, WE                                   $\
	                                                                            $\
	; Trp (100ns) and Tcpn (25ns) are covered by function exit                  $\
	restore_registers(r20, r21, r22, r23, yl, yh)                               $\
	ret                                                                         $\
)

; z = address
; bit returned in carry
DEF_LABELED(m4164_dram_read_bit_c,                                            $\
	; fall-through intentional                                                  $\
)

; z = address
; bit returned in r25
DEF_LABELED(m4164_dram_read_bit,                                              $\
	save_registers(r20, r21, r23, yl, yh)                                       $\
	                                                                            $\
	lds    yl, __m4164_config+1                                                 $\
	lds    yh, __m4164_config+0                                                 $\
	ldd    r20, y+m4164_config_CAS_mask                                         $\
	ldd    r21, y+m4164_config_RAS_mask                                         $\
	                                                                            $\
	; set up state                                                              $\
	; the first thing we will do is assert ~RAS, so we dont include it in the   $\
	; set up here.                                                              $\
	; bits that need to be set are:                                             $\
	;  - CAS                                                                    $\
	;  - WE                                                                     $\
	; r24 will be the (initial) state                                           $\
	out    PORTD, zh   ; set row address                                        $\
	in     r23, SREG   ; store state of IE flag                                 $\
	cli                ; prevent interrupt from messing with addresses          $\
	in     r24, PORTB  ; get current state (will have CAS set)                  $\
	eor    r24, r21    ; assert RAS                                             $\
	                                                                            $\
	; strobe row address                                                        $\
	; Tasr (row address setup time) = 0ns, so we can 'immediately' assert RAS   $\
	; WE and RAS bits are already clear in state                                $\
	out    PORTB, r24  ; assert RAS, WE                                         $\
	; Tras (RAS pulse width) width is 150ns (2.4 cycles)              /* RAS */ $\
	; Trah (row address hold time) is 15ns (0.24 cycles)                        $\
	; strobe column address (interleave RAS)                                    $\
	; Tcas (CAS pulse width) is 75ns (1.2 cycles)                               $\
	; Tcpn (CAS precharge time non-page) is 25ns                                $\
	; Trcd (RAS to CAS delay) is 25 < n < 75ns (non-normative)                  $\
	; Trac (access time from RAS) is <150ns (2.4 cycles)                        $\
	; Tcac (access time from CAS) is <75ns  (1.2 cycles)                        $\
	; NOTE: Im assuming that Tcac is a guarantee from the memory, i.e. data     $\
	; will be available no later than 75ns after asserting CAS                  $\
	eor    r24, r20    ; clear CAS bit (covers Trah)                  /*   1 */ $\
	out    PORTD, zl   ; Set row addr, Tasc is 0ns, Tcah is 20ns      /*   2 */ $\
	out    PORTB, r24  ; assert CAS                       /* CAS */   /*   3 */ $\
	eor    r24, r20    ; set RAS bit                      /*   1 */             $\
	or     r24, r21    ; set CAS bit                      /*   2 */             $\
	in     r25, PORTB  ; read bit                                               $\
	out    SREG, r23   ; restore IE flag (next instruction is still executed)   $\
	out    PORTB, r24  ; disable RAS, CAS                                       $\
	                                                                            $\
	; read bit will always set C, to cover for m4164_dram_read_bit_c; i.e.      $\
	; one implementation for two functions, which we can do since we still      $\
	; need to convert r25 from control bits to an actual bit value [0,1]        $\
	ldd    r24, y+m4164_config_Dout_mask                                        $\
	and    r25, r24                                                             $\
	cp     r00, r25    ; sets C if r25 != 0                                     $\
	brcc   __m4164_dram_read_bit_done                                           $\
	mov    r25, r01                                                             $\
	                                                                            $\
__m4164_dram_read_bit_done:                                                   $\
	; Trp (100ns) and Tcpn (25ns) are covered by function exit                  $\
	restore_registers(r20, r21, r23, yl, yh)                                    $\
	ret                                                                         $\
)

; z=address, addresses next 8 bits
; byte in r16
;
; assumes column address + 8 wont cross row boundary
; retuns the next address (i.e. z+8) in z
DEF_LABELED(m4164_dram_write_byte,                                            $\
	save_registers(r16, r21, r22, r23, yl, yh)                                  $\
	                                                                            $\
	lds    yl, __m4164_config+1                                                 $\
	lds    yh, __m4164_config+0                                                 $\
	ldd    r21, y+m4164_config_WE_mask                                          $\
	ldd    r22, y+m4164_config_RAS_mask                                         $\
	ldd    r23, y+m4164_config_CAS_mask                                         $\
	ldd    r24, y+m4164_config_Din_mask                                         $\
	                                                                            $\
	; set up state                                                              $\
	; the first thing we will do is assert ~RAS, so we dont include it in the   $\
	; set up here. Simultaneously with RAS we will assert ~WE.                  $\
	; bits that need to be set are:                                             $\
	;  - Din                                                                    $\
	;  - CAS                                                                    $\
	; r25 will be the (initial) state                                           $\
	out    PORTD, zh   ; set row address                                        $\
	in     yh, SREG    ; store state of IE flag                                 $\
	cli                ; prevent interrupt from messing with addresses          $\
	in     r25, PORTB  ; get current state (will have CAS set)                  $\
	eor    r25, r21    ; assert WE                                              $\
	eor    r25, r22    ; assert RAS                                             $\
	                                                                            $\
	; strobe row address                                                        $\
	; Tasr (row address setup time) = 0ns, so we can 'immediately' assert RAS   $\
	out    PORTB, r25  ; assert RAS, WE                               /* RAS */ $\
	; Tras (RAS pulse width) width is 150ns (2.4 cycles)                        $\
	; Trah (row address hold time) is 15ns (0.24 cycles)                        $\
	; strobe column address (interleave RAS)                                    $\
	; Tcpn (CAS precharge time non-page) is 25ns                                $\
	; Trcd (RAS to CAS delay) is 25 < n < 75ns (non-normative)                  $\
	ldi    yl, 8       ; 8 bits to output                                       $\
__m4164_dram_write_byte_next_bit:                                             $\
	; set Din for next bit                                                      $\
	or     r25, r24    ; set Din (or doesnt affect Carry)                       $\
	rol    r16         ; get next bit                                           $\
	brcs   __m4164_dram_write_byte_1                                            $\
	eor    r25, r24    ; clear Din (and doesnt affect Carry)                    $\
__m4164_dram_write_byte_1:                                                    $\
	out    PORTD, zl   ; Set column addr, Tasc is 0ns, Tcah is 20ns             $\
	adiw   zl, 1       ; prepare for next bit                                   $\
	; Tds is 0ns, so we should be able to assert both Din and CAS at once       $\
	eor    r25, r23    ; clear CAS bit (eor doesnt affect Carry)                $\
	out    PORTB, r25  ; output bit (assert CAS and Din)              /* CAS */ $\
	; Tdh is just 30ns (0.48 cycles),                                           $\
	; Tcas (CAS pulse width) is 75ns (1.2 cycles)                               $\
	eor    r25, r23    ; set CAS bit (~CAS) (or doesnt affect Carry)  /*   1 */ $\
	dec    yl          ; doesnt affect Carry                          /*   2 */ $\
	out    PORTB, r25  ; de-assert CAS                                          $\
	; Tcp is 60ns (0.96 cycles)                                                 $\
	brne   __m4164_dram_write_byte_next_bit                                     $\
	                                                                            $\
	or     r25, r21    ; set WE bit                                             $\
	or     r25, r22    ; set RAS bit                                            $\
	out    SREG, yh    ; restore IE flag (next instruction is still executed)   $\
	out    PORTB, r25  ; de-assert RAS, WE                                      $\
	                                                                            $\
	; Trp (100ns) and Tcpn (25ns) are covered by function exit                  $\
	restore_registers(r16, r21, r22, r23, yl, yh)                               $\
	ret                                                                         $\
)

; z=address, addresses next 8 bits
; byte returned in r25
;
; assumes column address + 8 wont cross row boundary
; retuns the next address (i.e. z+8) in z
DEF_LABELED(m4164_dram_read_byte,                                             $\
	save_registers(r20, r21, r22, r23, yl, yh)                                  $\
	                                                                            $\
	lds    yl, __m4164_config+1                                                 $\
	lds    yh, __m4164_config+0                                                 $\
	ldd    r21, y+m4164_config_Dout_mask                                        $\
	ldd    r22, y+m4164_config_RAS_mask                                         $\
	ldd    r23, y+m4164_config_CAS_mask                                         $\
	                                                                            $\
	; set up state                                                              $\
	; the first thing we will do is assert ~RAS, so we dont include it in the   $\
	; set up here.                                                              $\
	; bits that need to be set are:                                             $\
	;  - CAS                                                                    $\
	;  - WE                                                                     $\
	; yl will be the (initial) state                                            $\
	out    PORTD, zh   ; set row address                                        $\
	in     yh, SREG    ; store state of IE flag                                 $\
	cli                ; prevent interrupt from messing with addresses          $\
	in     yl, PORTB   ; get current state (will have CAS set)                  $\
	eor    yl, r22     ; assert RAS                                             $\
	                                                                            $\
	; strobe row address                                                        $\
	; Tasr (row address setup time) = 0ns, so we can 'immediately' assert RAS   $\
	out    PORTB, yl   ; assert RAS                                   /* RAS */ $\
	; Tras (RAS pulse width) width is 150ns (2.4 cycles)                        $\
	; Trah (row address hold time) is 15ns (0.24 cycles)                        $\
	; strobe column address (interleave RAS)                                    $\
	; Tcp (CAS precharge time page mode) is 60ns (0.96 cycles)                  $\
	; Trcd (RAS to CAS delay) is 25 < n < 75ns (non-normative)                  $\
	ldi    r24, 8      ; 8 bits to input                              /*   1 */ $\
	sub    r25,r25     ; r25 will receive the result, clear carry     /*   2 */ $\
__m4164_dram_read_byte_next_bit:                                              $\
	out    PORTD, zl   ; Set column addr, Tasc is 0ns, Tcah is 20ns   /*   3 */ $\
	eor    yl, r23     ; clear CAS bit                                          $\
	out    PORTB, yl   ; assert CAS                                   /* CAS */ $\
	; Tcas (CAS pulse width) is 75ns (1.2 cycles)                               $\
	; Tcac (access time from CAS) is 75ns (1.2 cycles)                          $\
	eor    yl, r23     ; set CAS bit (~CAS)                           /*   1 */ $\
	rol    r25         ; prepare for next bit                         /*   2 */ $\
	adiw   zl, 1       ; prepare for next bit (after rol!)                      $\
	in     r20, PORTB  ; read bit                                               $\
	out    PORTB, yl   ; de-assert CAS                                          $\
	                                                                            $\
	and    r20, r21    ; test bit into Z                                        $\
	breq   __m4164_dram_read_byte_bit_0                                         $\
	inc     r25        ; copy from Z into r25                                   $\
__m4164_dram_read_byte_bit_0:                                                 $\
	                                                                            $\
	dec    r24                                                                  $\
	brne   __m4164_dram_read_byte_next_bit                                      $\
	                                                                            $\
	or     yl, r22     ; set RAS bit                                            $\
	out    SREG, yh    ; restore IE flag (next instruction is still executed)   $\
	out    PORTB, yl   ; de-assert RAS                                          $\
	                                                                            $\
	; Trp (100ns) and Tcpn (25ns) are covered by function exit                  $\
	restore_registers(r20, r21, r22, r23, yl, yh)                               $\
	                                                                            $\
	ret                                                                         $\
)

; Refreshes every row of the memory, should be called at least once every 2ms.
ISR_HANDLER(m4164_interrupt_handler_dram_refresh,                             $\
	call   m4164_dram_refresh                                                   $\
)


DEF_LABELED(m4164_dram_refresh,                                               $\
	save_registers(r24, r25, zl, zh)                                            $\
	                                                                            $\
	lds    zl, __m4164_config+1                                                 $\
	lds    zh, __m4164_config+0                                                 $\
	                                                                            $\
	; This is a bit weird, but should work. We only need to refresh the given   $\
	; number of rows. During refresh, the memory only cares about the lower n   $\
	; bits of the address. So by starting at m4164_config_row_count and working $\
	; our way down to 0, we first refresh row 0, followed by row n-1, down to   $\
	; row 1; thus still covering all row addresses.                             $\
	ldd    r24, z+m4164_config_row_count                                        $\
	ldd    r25, z+m4164_config_RAS_mask                                         $\
	in     zl, PORTD  ; save current address                                    $\
	in     zh, PORTB  ; load current state                                      $\
	                                                                            $\
__m4164_refresh_next_row:                                                     $\
	out    PORTD, r24  ; select row address                                     $\
	                                                                            $\
	; Tasr (row address setup time) = 0ns, so we can 'immediately' assert RAS   $\
	eor    zh, r25     ; clear RAS bit in state                                 $\
	; Tras (RAS pulse width) width is 150ns (2.4 cycles)                        $\
	out    PORTB, zh   ; assert RAS                                   /* RAS */ $\
	eor    zh, r25     ; set RAS bit in state                         /*   1 */ $\
	dec    r24                                                        /*   2 */ $\
	breq   __m4164_refresh_done                                       /*   3 */ $\
	; Trp (RAS precharge time) is 100ns (1.6 cycles)                            $\
	out    PORTB, zh   ; disable RAS                                 /* ~RAS */ $\
	rjmp   __m4164_refresh_next_row                                  /*   2  */ $\
	                                                                            $\
__m4164_refresh_done:                                                         $\
	; Tasr is 0, Trah (row address hold time) is 15ns, Tasc (column address     $\
	; setup time) is 0ns, and , Tcah is 20ns.                                   $\
	; Exit from this function will take sufficient time to cover all.           $\
	out    PORTB, zh   ; disable RAS                                 /* ~RAS */ $\
	out    PORTD, zl   ; restore address                                        $\
	restore_registers(r24, r25, zl, zh)                                         $\
	                                                                            $\
	ret                                                                         $\
)
