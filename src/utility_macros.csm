/******************************************************************************

   This file contains a collection of convenience functions for working with
   assembly level constructs. It also provides a large number of support
   macros which may be of use.

   Notes:

   The '$' symbol should mark the end of a logical line (but AVRA doesn't seem
   to support this).
     -- http://lists.gnu.org/archive/html/avr-gcc-list/2003-09/msg00037.html

 ******************************************************************************/
#pragma once

#include "abi.csm"
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/stringize.hpp>
#include <boost/preprocessor/comparison/equal.hpp>
#include <boost/preprocessor/comparison/greater.hpp>
#include <boost/preprocessor/control/iif.hpp>
#include <boost/preprocessor/facilities/empty.hpp>
#include <boost/preprocessor/facilities/identity.hpp>
#include <boost/preprocessor/logical/compl.hpp>
#include <boost/preprocessor/seq/cat.hpp>
#include <boost/preprocessor/seq/pop_back.hpp>
#include <boost/preprocessor/seq/seq.hpp>
#include <boost/preprocessor/seq/to_tuple.hpp>
#include <boost/preprocessor/variadic/to_seq.hpp>
#include <boost/preprocessor/variadic/elem.hpp>
#include <boost/preprocessor/repetition/repeat.hpp>


/**
 * Some debug helpers.
 */
#define FIRST( X, ... )     [[[ 1 | X ]]]
#define SECOND( X, Y, ... ) [[[ 2 | Y ]]]



/**
 * Forces a error to occur during macro evaluation.
 *
 * Compliant compilers will complain about a macro call without an argument for
 * the variadic argument, while other compilers should simply show the error
 * text using a pragma (error) message.
 */
#define FORCE_MACRO_ERROR_(x, ...)   _Pragma( BOOST_PP_STRINGIZE( GCC error( #x ) ) )
#define FORCE_MACRO_ERROR(...)       FORCE_MACRO_ERROR_( (__VA_ARGS__) )



/**
 * Concatenates any number of arguments (up-to 64).
 */
#define CAT_N_( \
  A00, A01, A02, A03, A04, A05, A06, A07, \
  A08, A09, A0A, A0B, A0C, A0D, A0E, A0F, \
  A10, A11, A12, A13, A14, A15, A16, A17, \
  A18, A19, A1A, A1B, A1C, A1D, A1E, A1F, \
  A20, A21, A22, A23, A24, A25, A26, A27, \
  A28, A29, A2A, A2B, A2C, A2D, A2E, A2F, \
  A30, A31, A32, A33, A34, A35, A36, A37, \
  A38, A39, A3A, A3B, A3C, A3D, A3E, A3F, \
  A40, A41, A42, A43, A44, A45, A46, A47, \
  A48, A49, A4A, A4B, A4C, A4D, A4E, A4F, \
  A50, A51, A52, A53, A54, A55, A56, A57, \
  A58, A59, A5A, A5B, A5C, A5D, A5E, A5F, \
  A60, A61, A62, A63, A64, A65, A66, A67, \
  A68, A69, A6A, A6B, A6C, A6D, A6E, A6F, \
  A70, A71, A72, A73, A74, A75, A76, A77, \
  A78, A79, A7A, A7B, A7C, A7D, A7E, A7F, \
  ... \
) \
  A00 ## A01 ## A02 ## A03 ## A04 ## A05 ## A06 ## A07 ## \
  A08 ## A09 ## A0A ## A0B ## A0C ## A0D ## A0E ## A0F ## \
  A10 ## A11 ## A12 ## A13 ## A14 ## A15 ## A16 ## A17 ## \
  A18 ## A19 ## A1A ## A1B ## A1C ## A1D ## A1E ## A1F ## \
  A20 ## A21 ## A22 ## A23 ## A24 ## A25 ## A26 ## A27 ## \
  A28 ## A29 ## A2A ## A2B ## A2C ## A2D ## A2E ## A2F ## \
  A30 ## A31 ## A32 ## A33 ## A34 ## A35 ## A36 ## A37 ## \
  A38 ## A39 ## A3A ## A3B ## A3C ## A3D ## A3E ## A3F ## \
  A40 ## A41 ## A42 ## A43 ## A44 ## A45 ## A46 ## A47 ## \
  A48 ## A49 ## A4A ## A4B ## A4C ## A4D ## A4E ## A4F ## \
  A50 ## A51 ## A52 ## A53 ## A54 ## A55 ## A56 ## A57 ## \
  A58 ## A59 ## A5A ## A5B ## A5C ## A5D ## A5E ## A5F ## \
  A60 ## A61 ## A62 ## A63 ## A64 ## A65 ## A66 ## A67 ## \
  A68 ## A69 ## A6A ## A6B ## A6C ## A6D ## A6E ## A6F ## \
  A70 ## A71 ## A72 ## A73 ## A74 ## A75 ## A76 ## A77 ## \
  A78 ## A79 ## A7A ## A7B ## A7C ## A7D ## A7E ## A7F    \
// CAT_N_
#define CAT_N( ... ) CALL( CAT_N_, __VA_ARGS__,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, )



/**
 * Count the number of variadic arguments passed  (up-to 64).
 */
#define ARG_COUNT(...) BOOST_PP_VARIADIC_ELEM( 127,  \
	__VA_ARGS__,                                      \
	          127, 126, 125, 124, 123, 122, 121, 120, \
	119, 118, 117, 116, 115, 114, 113, 112, 111, 110, \
	109, 108, 107, 106, 105, 104, 103, 102, 101, 100, \
	 99,  98,  97,  96,  95,  94,  93,  92,  91,  90, \
	 89,  88,  87,  86,  85,  84,  83,  82,  81,  80, \
	 79,  78,  77,  76,  75,  74,  73,  72,  71,  70, \
	 69,  68,  67,  66,  65,  64,  63,  62,  61,  60, \
	 59,  58,  57,  56,  55,  54,  53,  52,  51,  50, \
	 49,  48,  47,  46,  45,  44,  43,  42,  41,  40, \
	 39,  38,  37,  36,  35,  34,  33,  32,  31,  30, \
	 29,  28,  27,  26,  25,  24,  23,  22,  21,  20, \
	 19,  18,  17,  16,  15,  14,  13,  12,  11,  10, \
	  9,   8,   7,   6,   5,   4,   3,   2, BOOST_PP_IIF(IS_EMPTY(__VA_ARGS__), 0, 1)  \
) // ARG_COUNT


/**
 * Determines whether the given input number is even or not (up-to 64).
 *
 * Returns 1 for even numbers, 0 for odd numbers.
 */
#define IS_EVEN(x) BOOST_PP_VARIADIC_ELEM( x,       \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,  1, 0,            \
	 1,  0,  1,  0,  1,  0,  1,  0,                   \
) // IS_EVEN


/**
 * Determines whether the given input number is odd or not (up-to 64).
 *
 * Returns 1 for odd numbers, 0 for even numbers.
 */
#define IS_ODD(x) BOOST_PP_COMPL(IS_EVEN(x))



/**
 * Determines whether the given input number is zero or not (up-to 64).
 *
 * Returns 1 for zero, 0 for other numbers.
 */
#define IS_ZERO(x) BOOST_PP_VARIADIC_ELEM( x,     \
	 1,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,         \
	 0,  0,  0,  0,  0,  0,  0,  0,                 \
) // IS_ZERO


/**
 * Detect whether a set of arguments contains a comma or not.
 * Adapted from https://gustedt.wordpress.com/2010/06/08/detect-empty-macro-arguments/
 *
 * Limited to 64 arguments due to BOOST_PP_LIMIT_VARIADIC
 * __VA_ARGS__ will sit at position 0, and push the remaining 63 arguments one
 * to the left for every comma it contains. So only if there are no commas in
 * __VA_ARGS__ will we return the last, 64th, element '0'.
 */
#define HAS_COMMA(...)                                                         \
  BOOST_PP_VARIADIC_ELEM( 127,                                                 \
    __VA_ARGS__,                                                               \
/* 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F */                           \
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                             \
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                             \
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                             \
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                             \
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                             \
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                             \
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                             \
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0                              \
  ) // HAS_COMMA


/**
 * The BOOST_PP_LIMIT_VARIADIC is currently 64, which is ... restrictive.
 */
#define BOOST_PP_VARIADIC_ELEM_64(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, ...) e64
#define BOOST_PP_VARIADIC_ELEM_65(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, ...) e65
#define BOOST_PP_VARIADIC_ELEM_66(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, ...) e66
#define BOOST_PP_VARIADIC_ELEM_67(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, ...) e67
#define BOOST_PP_VARIADIC_ELEM_68(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, ...) e68
#define BOOST_PP_VARIADIC_ELEM_69(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, ...) e69
#define BOOST_PP_VARIADIC_ELEM_70(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, ...) e70
#define BOOST_PP_VARIADIC_ELEM_71(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, ...) e71
#define BOOST_PP_VARIADIC_ELEM_72(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, ...) e72
#define BOOST_PP_VARIADIC_ELEM_73(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, ...) e73
#define BOOST_PP_VARIADIC_ELEM_74(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, ...) e74
#define BOOST_PP_VARIADIC_ELEM_75(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, ...) e75
#define BOOST_PP_VARIADIC_ELEM_76(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, ...) e76
#define BOOST_PP_VARIADIC_ELEM_77(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, ...) e77
#define BOOST_PP_VARIADIC_ELEM_78(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, ...) e78
#define BOOST_PP_VARIADIC_ELEM_79(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, ...) e79
#define BOOST_PP_VARIADIC_ELEM_80(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, ...) e80
#define BOOST_PP_VARIADIC_ELEM_81(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, ...) e81
#define BOOST_PP_VARIADIC_ELEM_82(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, ...) e82
#define BOOST_PP_VARIADIC_ELEM_83(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, ...) e83
#define BOOST_PP_VARIADIC_ELEM_84(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, ...) e84
#define BOOST_PP_VARIADIC_ELEM_85(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, ...) e85
#define BOOST_PP_VARIADIC_ELEM_86(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, ...) e86
#define BOOST_PP_VARIADIC_ELEM_87(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, ...) e87
#define BOOST_PP_VARIADIC_ELEM_88(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, ...) e88
#define BOOST_PP_VARIADIC_ELEM_89(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, ...) e89
#define BOOST_PP_VARIADIC_ELEM_90(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, ...) e90
#define BOOST_PP_VARIADIC_ELEM_91(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, ...) e91
#define BOOST_PP_VARIADIC_ELEM_92(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, ...) e92
#define BOOST_PP_VARIADIC_ELEM_93(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, ...) e93
#define BOOST_PP_VARIADIC_ELEM_94(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, ...) e94
#define BOOST_PP_VARIADIC_ELEM_95(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, ...) e95
#define BOOST_PP_VARIADIC_ELEM_96(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, ...) e96
#define BOOST_PP_VARIADIC_ELEM_97(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, ...) e97
#define BOOST_PP_VARIADIC_ELEM_98(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, ...) e98
#define BOOST_PP_VARIADIC_ELEM_99(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, ...) e99
#define BOOST_PP_VARIADIC_ELEM_100(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, ...) e100
#define BOOST_PP_VARIADIC_ELEM_101(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, ...) e101
#define BOOST_PP_VARIADIC_ELEM_102(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, ...) e102
#define BOOST_PP_VARIADIC_ELEM_103(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, ...) e103
#define BOOST_PP_VARIADIC_ELEM_104(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, ...) e104
#define BOOST_PP_VARIADIC_ELEM_105(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, ...) e105
#define BOOST_PP_VARIADIC_ELEM_106(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, ...) e106
#define BOOST_PP_VARIADIC_ELEM_107(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, ...) e107
#define BOOST_PP_VARIADIC_ELEM_108(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, ...) e108
#define BOOST_PP_VARIADIC_ELEM_109(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, ...) e109
#define BOOST_PP_VARIADIC_ELEM_110(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, ...) e100
#define BOOST_PP_VARIADIC_ELEM_111(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, ...) e111
#define BOOST_PP_VARIADIC_ELEM_112(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, ...) e112
#define BOOST_PP_VARIADIC_ELEM_113(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, ...) e113
#define BOOST_PP_VARIADIC_ELEM_114(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, ...) e114
#define BOOST_PP_VARIADIC_ELEM_115(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, ...) e115
#define BOOST_PP_VARIADIC_ELEM_116(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, ...) e116
#define BOOST_PP_VARIADIC_ELEM_117(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, ...) e117
#define BOOST_PP_VARIADIC_ELEM_118(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, ...) e118
#define BOOST_PP_VARIADIC_ELEM_119(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, ...) e119
#define BOOST_PP_VARIADIC_ELEM_120(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, e120, ...) e120
#define BOOST_PP_VARIADIC_ELEM_121(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, e120, e121, ...) e121
#define BOOST_PP_VARIADIC_ELEM_122(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, e120, e121, e122, ...) e122
#define BOOST_PP_VARIADIC_ELEM_123(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, e120, e121, e122, e123, ...) e123
#define BOOST_PP_VARIADIC_ELEM_124(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, e120, e121, e122, e123, e124, ...) e124
#define BOOST_PP_VARIADIC_ELEM_125(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, e120, e121, e122, e123, e124, e125, ...) e125
#define BOOST_PP_VARIADIC_ELEM_126(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, e120, e121, e122, e123, e124, e125, e126, ...) e126
#define BOOST_PP_VARIADIC_ELEM_127(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36, e37, e38, e39, e40, e41, e42, e43, e44, e45, e46, e47, e48, e49, e50, e51, e52, e53, e54, e55, e56, e57, e58, e59, e60, e61, e62, e63, e64, e65, e66, e67, e68, e69, e70, e71, e72, e73, e74, e75, e76, e77, e78, e79, e80, e81, e82, e83, e84, e85, e86, e87, e88, e89, e90, e91, e92, e93, e94, e95, e96, e97, e98, e99, e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, e120, e121, e122, e123, e124, e125, e126, e127, ...) e127

#undef BOOST_PP_VARIADIC_SIZE
#undef BOOST_PP_VARIADIC_SIZE_I
#define BOOST_PP_VARIADIC_SIZE(...) \
BOOST_PP_VARIADIC_SIZE_I(__VA_ARGS__,               \
	     128, 127, 126, 125, 124, 123, 122, 121, 120, \
	119, 118, 117, 116, 115, 114, 113, 112, 111, 110, \
	109, 108, 107, 106, 105, 104, 103, 102, 101, 100, \
	 99,  98,  97,  96,  95,  94,  93,  92,  91,  90, \
	 89,  88,  87,  86,  85,  84,  83,  82,  81,  80, \
	 79,  78,  77,  76,  75,  74,  73,  72,  71,  70, \
	 69,  68,  67,  66,  65,  64,  63,  62,  61,  60, \
	 59,  58,  57,  56,  55,  54,  53,  52,  51,  50, \
	 49,  48,  47,  46,  45,  44,  43,  42,  41,  40, \
	 39,  38,  37,  36,  35,  34,  33,  32,  31,  30, \
	 29,  28,  27,  26,  25,  24,  23,  22,  21,  20, \
	 19,  18,  17,  16,  15,  14,  13,  12,  11,  10, \
	  9,   8,   7,   6,   5,   4,   3,   2,   1,      \
) // BOOST_PP_VARIADIC_SIZE
#define BOOST_PP_VARIADIC_SIZE_I(                             \
	  e0,   e1,   e2,   e3,   e4,   e5,   e6,   e7,   e8,   e9, \
	 e10,  e11,  e12,  e13,  e14,  e15,  e16,  e17,  e18,  e19, \
	 e20,  e21,  e22,  e23,  e24,  e25,  e26,  e27,  e28,  e29, \
	 e30,  e31,  e32,  e33,  e34,  e35,  e36,  e37,  e38,  e39, \
	 e40,  e41,  e42,  e43,  e44,  e45,  e46,  e47,  e48,  e49, \
	 e50,  e51,  e52,  e53,  e54,  e55,  e56,  e57,  e58,  e59, \
	 e60,  e61,  e62,  e63,  e64,  e65,  e66,  e67,  e68,  e69, \
	 e70,  e71,  e72,  e73,  e74,  e75,  e76,  e77,  e78,  e79, \
	 e80,  e81,  e82,  e83,  e84,  e85,  e86,  e87,  e88,  e89, \
	 e90,  e91,  e92,  e93,  e94,  e95,  e96,  e97,  e98,  e99, \
	e100, e101, e102, e103, e104, e105, e106, e107, e108, e109, \
	e110, e111, e112, e113, e114, e115, e116, e117, e118, e119, \
	e120, e121, e122, e123, e124, e125, e126, e127,             \
	size, ...) size



/**
 * Macro to detect whether an argument is (wholly) wrapped in parenthesis.
 */
#define HAS_PARENTHESES_01(...)  ,
#define HAS_PARENTHESES_(x, ...) HAS_COMMA( HAS_PARENTHESES_01 x )
#define HAS_PARENTHESES(...)                                                   \
  HAS_COMMA(                                                                   \
    BOOST_PP_CAT(                                                              \
      BOOST_PP_CAT(                                                            \
        HAS_PARENTHESES_,                                                      \
        HAS_COMMA(__VA_ARGS__)                                                 \
      ),                                                                       \
      HAS_PARENTHESES_(                                                        \
        __VA_ARGS__,                                                           \
        dummy                                                                  \
      )                                                                        \
    )()                                                                        \
  ) // HAS_PARENTHESES



/**
 * Removes parentheses around an argument recursively.
 * E.g. REMOVE_PARENTHESES( (((x,y),z)) ) evaluates to '(x,y),z'
 *
 * NOTE:
 * Supports up-to a maximum of 64 layers of nested parentheses.
 */
#define REMOVE_PARENTHESES_XX(...)   FORCE_MACRO_ERROR( MAXIMUM ITERATION DEPTH EXCEEDED )
#define REMOVE_PARENTHESES_00(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_XX, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_01(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_00, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_02(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_01, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_03(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_02, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_04(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_03, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_05(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_04, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_06(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_05, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_07(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_06, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_08(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_07, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_09(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_08, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_10(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_09, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_11(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_10, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_12(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_11, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_13(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_12, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_14(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_13, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_15(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_14, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_16(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_15, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_17(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_16, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_18(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_17, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_19(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_18, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_20(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_19, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_21(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_20, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_22(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_21, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_23(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_22, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_24(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_23, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_25(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_24, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_26(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_25, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_27(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_26, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_28(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_27, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_29(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_28, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_30(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_29, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_31(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_30, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_32(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_31, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_33(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_32, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_34(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_33, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_35(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_34, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_36(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_35, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_37(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_36, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_38(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_37, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_39(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_38, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_40(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_39, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_41(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_40, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_42(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_41, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_43(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_42, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_44(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_43, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_45(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_44, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_46(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_45, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_47(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_46, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_48(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_47, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_49(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_48, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_50(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_49, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_51(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_50, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_52(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_51, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_53(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_52, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_54(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_53, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_55(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_54, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_56(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_55, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_57(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_56, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_58(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_57, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_59(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_58, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_60(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_59, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_61(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_60, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_62(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_61, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES_63(...)   BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESES_62, BOOST_PP_EMPTY() ) __VA_ARGS__
#define REMOVE_PARENTHESES(...)      REMOVE_PARENTHESES_63( __VA_ARGS__ )



/**
 * Removes a single layer of parentheses.
 * E.g. REMOVE_PARENTHESIS( (((x,y),z)) ) evaluates to '((x,y),z)'
 */
#define REMOVE_PARENTHESIS_(...) __VA_ARGS__
#define REMOVE_PARENTHESIS(...)  BOOST_PP_IF( HAS_PARENTHESES(__VA_ARGS__), REMOVE_PARENTHESIS_, BOOST_PP_EMPTY() ) __VA_ARGS__



#if 0
#define III_ARG16(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, ...) _15
#define IIIHAS_COMMA(...) III_ARG16(__VA_ARGS__, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0)
#define III_TRIGGER_PARENTHESIS_(...) ,

#define IIIISEMPTY(...)                                                    \
III_ISEMPTY(                                                               \
          /* test if there is just one argument, eventually an empty    \
             one */                                                     \
          HAS_COMMA(__VA_ARGS__),                                       \
          /* test if _TRIGGER_PARENTHESIS_ together with the argument   \
             adds a comma */                                            \
          HAS_COMMA(III_TRIGGER_PARENTHESIS_ __VA_ARGS__),                 \
          /* test if the argument together with a parenthesis           \
             adds a comma */                                            \
          HAS_COMMA(__VA_ARGS__ (/*empty*/)),                           \
          /* test if placing it between _TRIGGER_PARENTHESIS_ and the   \
             parenthesis adds a comma */                                \
          HAS_COMMA(III_TRIGGER_PARENTHESIS_ __VA_ARGS__ (/*empty*/))      \
          )

#define IIIPASTE5(_0, _1, _2, _3, _4) _0 ## _1 ## _2 ## _3 ## _4
#define III_ISEMPTY(_0, _1, _2, _3) HAS_COMMA(IIIPASTE5(III_IS_EMPTY_CASE_, _0, _1, _2, _3))
#define III_IS_EMPTY_CASE_0001 ,
#endif



/**
 * Detect whether a (set of) arguments expands to the empty argument.
 *
 * Note:
 *  IS_EMPTY will not correctly detect empty-ness for a function-like macro if
 *  only its name is passed. I.e. the following will not give the correct
 *  answer:
 *  ---8<---------
 *  #define FOO() ...
 *  IS_EMPTY( FOO )         // expands to 1, not 0
 *  --->8---------
 *
 *  This appears to be a fundamental problem, with no known solution. See e.g.
 *  the discussion on boost's implementation of IS_EMPTY at
 *  http://boost.2283326.n4.nabble.com/problem-with-BOOST-PP-IS-EMPTY-macro-td2603454.html
 *
 *
 *  Currently there are four cases tested (see below for details on what each
 *  case detects). In the end, we are looking for the case '0001', which means
 *  that:
 *   - The argument by itself does not expand to a comma,
 *   - It is not something wrapped in (or starting with) parenthesis,
 *   - It is not a function-like macro-name expanding to something containing a
 *     comma (but it might still expand to something without commas),
 *   - It does allow IS_EMPTY_0001 to expand, so it is either empty or it
 *     expands to something containing parenthesis,
 *  Combing this we know that the only two options for the argument are either
 *  that it is empty, or that it is a function-like macro name.
 *  The latter is not permitted since we cannot detect this case, as per the
 *  above discussion.
 *
 *  Cases known to still fail:
 *   - Sufficiently deeply nested expressions of the form "(x),y", where nesting
 *     occurs within x. E.g. "(((a,b),c),d)" fails with an attempt to paste a
 *     parenthesis.
 *     Probably the only way to work around this is to write a dedicated
 *     unwrapper macro for this type of nesting, up-to some maximum depth
 *     (recursion sucks!)
 *
 * Adapted from https://gustedt.wordpress.com/2010/06/08/detect-empty-macro-arguments/
 */
#define IS_EMPTY_0001(...) ,
#define IS_EMPTY(...)                                                          \
  HAS_COMMA(                                                                   \
    BOOST_PP_SEQ_CAT(                                                          \
      /**                                                                    */\
      /* Base name of result, the output of the below tests will be appended */\
      /* to this, which produces e.g. 'IS_EMPTY_0101'.                       */\
      ( IS_EMPTY_ )                                                            \
      /**                                                                    */\
      /* Returns 0 for either a single value or the empty argument, 1        */\
      /* otherwise.                                                          */\
      ( HAS_COMMA( __VA_ARGS__ ) )                                             \
      /**                                                                    */\
      /* Returns 1 if __VA_ARGS__ is something which starts with a '(' and   */\
      /* contains a ')', i.e. if it might be considered a set of arguments.  */\
      ( HAS_COMMA( IS_EMPTY_0001 __VA_ARGS__ ) )                               \
      /**                                                                    */\
      /* Returns 1 if __VA_ARGS__ is itself a function-like macro which      */\
      /* expands to something containing a comma                             */\
      ( HAS_COMMA( __VA_ARGS__() ) )                                           \
      /**                                                                    */\
      /* Returns 1 if either:                                                */\
      /*  1) __VA_ARGS__ expands to something containing a comma,            */\
      /*  2) __VA_ARGS__() expands to something containing a comma,          */\
      /*  3) __VA_ARGS__ expands to nothing (triggering IS_EMPTY_0001(),     */\
      /*     which expands to a comma)                                       */\
      /*  4) __VA_ARGS__ expands to something starting with parenthesis,     */\
      /*     allowing IS_EMPTY_0001 to trigger.                              */\
      /*                                                                     */\
      /* We can do slightly better if we concatenate the __VA_ARGS__ to the  */\
      /* IS_EMPTY and _0001 parts, because in that case we will for a new    */\
      /* token IS_EMPTYxxxx_0001 (where 'xxxx' is whatever __VA_ARGS__       */\
      /* expands to), not triggering IS_EMPTY_0001. Example:                 */\
      /*   CAT_N(IS_EMPTY, __VA_ARGS__, _0001)()                             */\
      /* However, this approach fails when __VA_ARGS__ contains elements     */\
      /* which are not valid identifiers, and cannot be pasted together.     */\
      /* For example strings, characters ('c'), operators ('+', '/', etc)    */\
      /* will cause a preprocessor error.                                    */\
      /* Being able to handle such constructs is probably more important     */\
      /* than the ability to detect a function-like macro passed without     */\
      /* parentheses. E.g. it will enable us to correctly count the empty    */\
      /* parameter list (see ARG_COUNT()).                                   */\
      /*                                                                     */\
      /* Additionally we could do something like this:                       */\
      /*   REMOVE_PARENTHESES( BOOST_PP_VARIADIC_ELEM( 0, __VA_ARGS__ ) )    */\
      /* To remove parentheses on the first argument, in order to (attempt   */\
      /* to) deal with arguments of the form '(x,y),z'.                      */\
      (                                                                        \
        HAS_COMMA(                                                             \
            IS_EMPTY_0001                                                      \
            __VA_ARGS__                                                        \
            ()                                                                 \
        )                                                                      \
      )                                                                        \
   )()                                                                         \
  ) // IS_EMPTY



/**
 * Call a function-like macro by name, optionally passing a parameter list.
 */
#define CALL( F, ... ) F( __VA_ARGS__ )


/**
 * Swallows all arguments passed to it
 */
#define SWALLOW(...)


/**
 * Forces re-evaluation of its contents.
 *
 * E.g. when you have three macro's F, G, and H, where F expands to H, G
 * expands to (), and H expands to RESULT, the end result of F G would be H ().
 * Using EVAL(F G), the result will be the expected RESULT.
 */
#define EVAL(...) __VA_ARGS__


/**
 * When passing e.g. __VA_ARGS__ through some BOOST_PP function (such as
 * BOOST_PP_IF), the expanded __VA_ARGS__ will cause a wrong number of arguments
 * to be passed to BOOST_PP_IF. To prevent this, you can "protect" the list with
 * these macros, which simply wrap the list in a pair of parenthesis.
 */
#define PROTECT(...) (__VA_ARGS__)
#define UNPROTECT_(...) __VA_ARGS__
#define UNPROTECT(...) UNPROTECT_ __VA_ARGS__



/**
 * Returns the first element of a variadic argument list.
 */
#define VARIADIC_HEAD_( first, ... ) first
#define VARIADIC_HEAD( ... ) VARIADIC_HEAD_( __VA_ARGS__, dummy )



/**
 * Returns all but the first element of a variadic argument list.
 */
//*
#define VARIADIC_TAIL_( ... )
#define VARIADIC_TAIL__( first, ... ) __VA_ARGS__
#define VARIADIC_TAIL( ... )                                                   \
  BOOST_PP_IF(                                                                 \
    BOOST_PP_DEC( BOOST_PP_VARIADIC_SIZE( __VA_ARGS__ ) ),                     \
    VARIADIC_TAIL__,                                                           \
    VARIADIC_TAIL_                                                             \
  )( __VA_ARGS__ )                                                             \
  // VARIADIC_TAIL



/**
 * Surround a macro definition with markers.
 */
#define DEF_MARKER_( name, ... )                                                               $\
  ; ---[ name ]------------------------------------------------                                 \
  BOOST_PP_IIF( IS_EMPTY( __VA_ARGS__ ),$ ; (no code)$, )__VA_ARGS__                            \
  ; -----------------------------------------------[ BOOST_PP_EXPAND(__FILE__:__LINE__) ]---   $\
  // DEF_MARKER_
#define DEF_MARKER(...) DEF_MARKER_( VARIADIC_HEAD( __VA_ARGS__ ), VARIADIC_TAIL( __VA_ARGS__ ) )



/**
 * Define a macro with a prefixed label. This way your code has a label which
 * can e.g. be jumped to.
 */
#define DEF_LABELED_0( name, ... )   DEF_MARKER( name, $ name: __VA_ARGS__ )
#define DEF_LABELED_1( name      )   DEF_MARKER( name, $ name: ; note: label only$ )
#define DEF_LABELED( ... )           CAT_N( DEF_LABELED_, IS_EMPTY( VARIADIC_TAIL( __VA_ARGS__ ) ) )( __VA_ARGS__ )



/**
 * Yet another AVRA quirk...
 *
 * From the official website:
 * ---8<---------
 *   Constant out of range
 *
 *   This warning occurs if a value exceeds the byte or word value of a
 *   assignment. Read the comment posted by Jim Galbraith:
 *
 *   The expression (~0x80) is a Bitwise Not operation. This operator returns
 *   the input expression with all its bits inverted. If 0x80 represents -128,
 *   then 0x7f, or +127 should be ok. If this is considered as a 32-bit
 *   expression (AVRA internal representation), then it appears to be more like
 *   oxffffffff-0x80 or 0xffffffff0x80. The result would then be 0xffffff7f.
 *   The assembler would then have to be told or it would have to decide, based
 *   on context, how much significance to assign to the higher bits. I have
 *   also encountered such conditions with various assemblers, including AVRA.
 *   To make sure the assembler does what I really want, I use a construct like
 *   0xff-0x80 or 0xff0x80. This way the bit significance cannot extend beyond
 *   bit-7 and there cannot be any misunderstanding.
 * --->8---------
 */
#define BITINV(x) (0xff - (x))


/**
 * Helpers for manipulating the stack pointer. Used e.g. by stack_reserve()
 * and stack_free().
 */
#define stack_manip___n__(z, n, data) BOOST_PP_CAT(data, $)
#define stack_manip___n_0(n, instr, tmp_reg)                                     \
	BOOST_PP_REPEAT(n, stack_manip___n__, instr tmp_reg)                           \
	// stack_free_n_0

#define stack_manip___min_bytes 4
#define stack_manip___n_1(n, instr, tmp_reg_1, tmp_reg_2, tmp_reg_3)             \
	in     tmp_reg_1, SPL                                                 /* 1 */ $\
	in     tmp_reg_2, SPH                                                 /* 1 */ $\
	in     tmp_reg_3, SREG  ; store state of IE flag                      /* 1 */ $\
	instr  tmp_reg_1, n                                                   /* 2 */ $\
	; The instruction following SEI will be executed before any pending           $\
	; interrupts. By issuing the SEI one instruction 'early', we gain a           $\
	; small improvement in latency by allowing interrupts to trigger              $\
	; again sooner.                                                               $\
	cli                                                                   /* 1 */ $\
	out    SPL, tmp_reg_1                                                 /* 1 */ $\
	out    SREG, tmp_reg_3   ; set IE                                     /* 1 */ $\
	out    SPH, tmp_reg_2                                                 /* 1 */ $\
	// stack_free_n_1

#define stack_manip___(description, n, mathop, pushpop, ...)                    $\
	; description n bytes of stack space                                          $\
	BOOST_PP_CAT(                                                                  \
		stack_manip___n_,                                                            \
		/* push/pop cost 2 cycles a piece, our generic routine takes 9 cycles, so */ \
		/* after 4 push/pops it's cheaper to use the generic routine.             */ \
		/* Space wise the generic routine would be better after 8 bytes.          */ \
		BOOST_PP_GREATER(n, stack_manip___min_bytes)                                 \
	)(                                                                             \
		n,                                                                           \
		BOOST_PP_IIF(BOOST_PP_GREATER(n, stack_manip___min_bytes), mathop, pushpop), \
		__VA_ARGS__                                                                  \
	)                                                                              \
	/* this line intentionally left blank                                       */ \
	// stack_reserve

#define stack_manip__(n, description, ...)                                       \
	BOOST_PP_IIF(                                                                  \
		BOOST_PP_GREATER(n, stack_manip___min_bytes),                                \
		BOOST_PP_IIF(                                                                \
			BOOST_PP_EQUAL(ARG_COUNT(__VA_ARGS__), 3),                                 \
			stack_manip___,                                                            \
			.error BOOST_PP_STRINGIZE(                                                 \
				description more than stack_manip___min_bytes (i.e. n) bytes of stack    \
				requires 3 temporary registers (not ARG_COUNT(__VA_ARGS__)).             \
			)                                                                         $\
			SWALLOW                                                                    \
		),                                                                           \
		BOOST_PP_IIF(                                                                \
			BOOST_PP_EQUAL(ARG_COUNT(__VA_ARGS__), 1),                                 \
			stack_manip___,                                                            \
			.error BOOST_PP_STRINGIZE(                                                 \
				description n byte(s) of stack requires a temporary register.            \
			)                                                                         $\
			SWALLOW                                                                    \
		)                                                                            \
	)                                                                              \
	// stack_manip__

/**
 * reserve a number of stack bytes
 */
#define stack_reserve(...)                                                       \
	stack_manip__(                                                                 \
		VARIADIC_HEAD(__VA_ARGS__),                                                  \
		Reserving,                                                                   \
		VARIADIC_TAIL(__VA_ARGS__)                                                   \
	)(                                                                             \
		Reserve,                                                                     \
		VARIADIC_HEAD(__VA_ARGS__),                                                  \
		sbiw,                                                                        \
		push,                                                                        \
		VARIADIC_TAIL(__VA_ARGS__)                                                   \
	)                                                                              \
	// stack_reserve

/**
 * release a number of stack bytes
 */
#define stack_free(...) \
	stack_manip__(                                                                 \
		VARIADIC_HEAD(__VA_ARGS__),                                                  \
		Releasing,                                                                   \
		VARIADIC_TAIL(__VA_ARGS__)                                                   \
	)(                                                                             \
		Release,                                                                     \
		VARIADIC_HEAD(__VA_ARGS__),                                                  \
		adiw,                                                                        \
		pop,                                                                         \
		VARIADIC_TAIL(__VA_ARGS__)                                                   \
	)                                                                              \
	// stack_reserve

/**
 * save_registers pushes all given registers
 */
#define save_registers_op(s, state, x) BOOST_PP_IIF(IS_EMPTY(state), , state $) push x
#define save_registers(...) BOOST_PP_SEQ_FOLD_LEFT(                              \
	save_registers_op,                                                             \
	,                                                                              \
	BOOST_PP_VARIADIC_TO_SEQ(__VA_ARGS__)                                          \
) // push()

/**
 * restore_registers pops all given registers
 */
#define restore_registers_op(s, state, x) pop x BOOST_PP_IIF(IS_EMPTY(state), , $ state)
#define restore_registers(...) BOOST_PP_SEQ_FOLD_LEFT(                           \
	restore_registers_op,                                                          \
	,                                                                              \
	BOOST_PP_VARIADIC_TO_SEQ(__VA_ARGS__)                                          \
) // push()

/**
 * When working with the flash, all addresses need to be multiplied by two,
 * because the flash is only word addressable.
 * I.e. when requesting the address of a label in flash, you get the word
 * address. But if you want to access flash using e.g. lpm, you need a byte
 * address.
 */
#define FLASH_ADDR(x) (2*(x))
