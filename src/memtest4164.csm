.nolist                  // We don't want to actually include defs in our listing file.
.include "m328pdef.inc"  // defines all the pins on the ATMega328 so we can
                         // use them by their names rather than addresses (not fun).
.list                    // We DO want to include the following code in our listing ;D


#include "abi.csm"
#include "interrupts.csm"

ISR_SET_HANDLER(ISR_RESET,      main                               )
ISR_SET_HANDLER(ISR_TIMER0_COMPA, m4164_interrupt_handler_dram_refresh)
ISR_SET_ORG_FOR_USER_CODE()

#include <boost/preprocessor/seq/for_each.hpp>
#include "utility_macros.csm"
#include "utility_functions.csm"
#include "m4164.csm"
#include "libc.csm"
#include "ssd1306.csm"

.dseg
	m4164_config: .byte struct_m4164_config_size

.cseg

write_wait_nop:
	ret

main:
	; set up the stack
	ldi    r25, low(RAMEND)
	out    SPL, r25
	ldi    r25, high(RAMEND)
	out    SPH, r25

	initialise_registers()

	libc_config(
		ssd1306_write_rom,
		ssd1306_write_ram,
		write_wait_nop
	)

	ssd1306_config(128, 64, PORTB, PORTB1, PORTB, PORTB2)
	ssd1306_init()

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;  4164 DRAM setup                                                         ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; Configure timer0 to refresh the DRAM every 15.625us
	;
	; clear Force Compare, WGM02, select 1/256 prescaler
	ldi    r25, (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(1<<CS02)|(0<<CS01)|(0<<CS00)
	out    TCCR0B, r25
	; clear Compare Match Output, enable CTC mode
	ldi    r25, (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(0<<WGM00)
	out    TCCR0A, r25
	; Set compare value
	ldi    r25, 125 ; F_CPU=16Mhz, prescaler=1/256 --> trigger every 2ms
	out    OCR0A, r25
	out    OCR0B, rC0 ; dont care
	; enable Compare Match A interrupt
	ldi    r25, (1<<OCIE0A)
	sts    TIMSK0, r25

	; Initialise m4164 driver
	; Physical connections:
	;
	;  N.C.  |  1  <---        --->  N.C. |  N/A
	;  Din   |  2  <--- Grey   --->  D12  |  Port B4
	; ~WE    |  3  <--- Black  --->  D10  |  Port B2
	; ~RAS   |  4  <--- Brown  --->  D9   |  Port B1
	;  A0    |  5  <--- Black  --->  D0   |  Port D0
	;  A2    |  6  <--- Grey   --->  D2   |  Port D2
	;  A1    |  7  <--- White  --->  D1   |  Port D1
	;  Vcc   |  8  <---        --->  N.C. |  N/A
	;  A7    |  9  <--- Orange --->  D7   |  Port D7
	;  A5    | 10  <--- Yellow --->  D5   |  Port D5
	;  A4    | 11  <--- Green  --->  D4   |  Port D4
	;  A3    | 12  <--- Blue   --->  D3   |  Port D3
	;  A6    | 13  <--- Purple --->  D6   |  Port D6
	;  Dout  | 14  <--- Red    --->  D8   |  Port B0
	; ~CAS   | 15  <--- White  --->  D11  |  Port B3
	;  Vss   | 16  <---        --->  N.C. |  N/A
	;
	ldi    zl, low(m4164_config)
	ldi    zh, high(m4164_config)
	ldi    r25, 128         $   std    z+m4164_config_row_count,    r25
	ldi    r25, 1<<PORTC2   $   std    z+m4164_config_WE_mask,      r25
	ldi    r25, 1<<PORTC4   $   std    z+m4164_config_Din_mask,     r25
	ldi    r25, 1<<PORTC0   $   std    z+m4164_config_Dout_mask,    r25
	ldi    r25, 1<<PORTC3   $   std    z+m4164_config_CAS_mask,     r25
	ldi    r25, 1<<PORTC1   $   std    z+m4164_config_RAS_mask,     r25

	ldi    zl, low(m4164_config)
	ldi    zh, high(m4164_config)
	call   m4164_init
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	sei

	ldi    r25, low(welcome_message)
	push   r25
	ldi    r25, high(welcome_message)
	push   r25
	call   _printf
	stack_free(2, r25)

	; configure PINC5 as input, so we can wait for a keypress
	in     r25, DDRC
	andi   r25, BITINV(1<<PINC5)
	out    DDRC, r25 ; set pin 5 as an input
	rjmp   wait_for_key_press_done
wait_for_key_press:
	in     r25, PINC
	andi   r25, 1<<PINC5
	breq   wait_for_key_press
	ret
wait_for_key_press_done:

	call   wait_for_key_press
	jmp run_all_tests

	#define TESTS                                       \
		((10, "All Zeroes"       , ramtest_all_zeroes     )) \
		(( 8, "All Ones"         , ramtest_all_ones       )) \
		((12, "Even nibbles"     , ramtest_even_nibbles   )) \
		((11, "Odd nibbles"      , ramtest_odd_nibbles    )) \
		((14, "Central nibble"   , ramtest_central_nibble )) \
		((12, "Outer crumbs"     , ramtest_outer_crumbs   )) \
		((11, "Even crumbs"      , ramtest_even_crumbs    )) \
		((10, "Odd crumbs"       , ramtest_odd_crumbs     )) \
		(( 9, "Even bits"        , ramtest_even_bits      )) \
		(( 8, "Odd bits"         , ramtest_odd_bits       )) \
		((12, "Walking Ones"     , ramtest_walking_ones   )) \
		((14, "Walking Zeroes"   , ramtest_walking_zeroes )) \
		((10, "Addressing"       , ramtest_adressing      )) \
		((17, "Bit fade (~10min)", ramtest_bit_fade       )) \
	// TESTS

	#define OP(i, data, elem) STRING_CONSTANT_N( \
		BOOST_PP_CAT(                              \
			BOOST_PP_TUPLE_ELEM(2, elem),            \
			_desc                                    \
		),                                         \
		BOOST_PP_TUPLE_ELEM(0, elem),              \
		BOOST_PP_TUPLE_ELEM(1, elem))              \
	// OP
	BOOST_PP_SEQ_FOR_EACH(OP, _, TESTS)
	#undef OP

test_names:
	#define OP(i, data, elem)                      \
		.db                                          \
			high(BOOST_PP_CAT(                         \
				BOOST_PP_TUPLE_ELEM(2, elem),            \
				_desc                                    \
			)),                                        \
			low(BOOST_PP_CAT(                          \
				BOOST_PP_TUPLE_ELEM(2, elem),            \
				_desc                                    \
			)),                                        \
		$                                            \
	// OP
	BOOST_PP_SEQ_FOR_EACH(OP, _, TESTS)
	#undef OP

test_funcs:
	#define OP(i, data, elem)                                           \
		.db                                                               \
			high(             BOOST_PP_TUPLE_ELEM(2, elem)        ),        \
			low (             BOOST_PP_TUPLE_ELEM(2, elem)        ),        \
			high(BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(2, elem), _desc)),        \
			low (BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(2, elem), _desc)),        \
		$                                                                 \
	// OP
	BOOST_PP_SEQ_FOR_EACH(OP, _, TESTS)
	.db 0, 0 ; end of list
	#undef OP

#undef TESTS


run_all_tests:
	ldi    r16, 00 ; total number of tests run
	ldi    r17, 00 ; number of failed tests
	ldi    xl, low(FLASH_ADDR(test_funcs))
	ldi    xh, high(FLASH_ADDR(test_funcs))

run_next_test:
	mov    zl, xl
	mov    zh, xh

	; load test addr
	lpm    yh, z
	adiw   zl, 1
	lpm    yl, z
	adiw   zl, 1

	cp     rC0, yl
	cpc    rC0, yh
	breq   run_tests_complete
	inc    r16

	; Determine and print test name
load_test_name:
	lpm    r25, z
	adiw   zl, 1
	lpm    r24, z
	adiw   zl, 1
	movw   xl, zl      ; save addr for next test
	push   r24         ; in-memory pointers are high, low
	push   r25
	ldi    r25, low(running_test)
	push   r25
	ldi    r25, high(running_test)
	push   r25
	call   _printf
	stack_free(4, r25)

	movw   zl, yl      ; set address of test

	icall              ; run test
	push   r25         ; remember the test fail/pass state
	cpse   r25, rC0    ; 0 = test passed, 1 = test failed
	rjmp   run_test_failed

run_test_passed:
	ldi    r25, low(test_passed)
	push   r25
	ldi    r25, high(test_passed)
	push   r25
	rjmp   run_test_print

run_test_failed:
	inc    r17
	ldi    r25, low(test_failed)
	push   r25
	ldi    r25, high(test_failed)
	push   r25

run_test_print:
	call   _printf
	stack_free(2, r25)

	pop    r25         ; recall test fail/pass state
	cpse   r25, rC0    ; 0 = test passed, 1 = test failed
	call   wait_for_key_press

	call   ram_test_delay_long
	jmp run_next_test

run_tests_complete:
	cpse   r17, rC0
	rjmp   run_tests_complete_failed

run_tests_complete_passed:
	push   r16
	ldi    r25, low(test_result_passed)
	push   r25
	ldi    r25, high(test_result_passed)
	push   r25
	call   _printf
	stack_free(2, r25)
	ldi    r25, low(crlf)
	push   r25
	ldi    r25, high(crlf)
	push   r25
	call   _printf
	stack_free(2, r25)
	debug_break(50) // slow blink = ok

run_tests_complete_failed:
	; print 'bad chip'
	push   r16
	push   r17
	ldi    r25, low(test_result_failed)
	push   r25
	ldi    r25, high(test_result_failed)
	push   r25
	call   _printf
	stack_free(2, r25)
	; additional newline
	ldi    r25, low(crlf)
	push   r25
	ldi    r25, high(crlf)
	push   r25
	call   _printf
	stack_free(2, r25)
	debug_break(10) // fast blink = not ok



	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- All zeroes                                                   ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_all_zeroes:
	save_registers(r16)
	ldi    r16, 0
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- All ones                                                     ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_all_ones:
	save_registers(r16)
	ldi    r16, 0xff
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Even nibbles                                                 ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_even_nibbles:
	save_registers(r16)
	ldi    r16, 0b11110000
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Odd nibbles                                                  ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_odd_nibbles:
	save_registers(r16)
	ldi    r16, 0b00001111
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Central nibble                                               ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_central_nibble:
	save_registers(r16)
	ldi    r16, 0b00111100
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Outer crumbs                                                 ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_outer_crumbs:
	save_registers(r16)
	ldi    r16, 0b11000011
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Even crumbs                                                  ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_even_crumbs:
	save_registers(r16)
	ldi    r16, 0b11001100
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Odd crumbs                                                   ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_odd_crumbs:
	save_registers(r16)
	ldi    r16, 0b00110011
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Even bits                                                    ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_even_bits:
	save_registers(r16)
	ldi    r16, 0b10101010
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Odd bits                                                     ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_odd_bits:
	save_registers(r16)
	ldi    r16, 0b01010101
	call   ramtest_fill_memory
	call   ram_test_delay_short
	call   ramtest_compare_memory
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Walking Ones                                                 ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_walking_ones:
	ldi    r24, 0b00000001
	ldi    r25, 0b10000000
	rjmp   __ramtest_walking_bits_impl
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Walking Zeroes                                               ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_walking_zeroes:
	ldi    r24, 0b11111110
	ldi    r25, 0b01111111
	rjmp   __ramtest_walking_bits_impl
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Walking bits (helper)                                        ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
__ramtest_walking_bits_impl:
	save_registers(r16, r17, r18, r19, zl, zh)
	movw   r18, r24
	clr   r17
	clr   zl
	clr   zh

__ramtest_walking_bits_impl_next_start:
	mov    r16, r18    ; initial position
__ramtest_walking_bits_impl_write_byte:
	call  m4164_dram_write_byte; auto increment z

	; Walk the bit
	mov    r25, r16
	rol    r25         ; move top bit into carry
	rol    r16         ; rotate

	cpi    zl, 0
	brne   __ramtest_walking_bits_impl_write_byte
	cpi    zh, 0
	brne   __ramtest_walking_bits_impl_write_byte

	mov    r16, r18
__ramtest_walking_bits_impl_read_byte:
	call   m4164_dram_read_byte; auto increment z

	cpse   r16, r25
	mov    r17, r16    ; r16 (pattern) is always nonzero

	; Walk the bit
	mov    r25, r16
	rol    r25         ; move top bit into carry
	rol    r16         ; rotate

	cpi    zl, 0
	brne   __ramtest_walking_bits_impl_read_byte
	cpi    zh, 0
	brne   __ramtest_walking_bits_impl_read_byte

	cp     r18, r19
	breq   __ramtest_walking_bits_impl_done

	call   ram_test_delay_short
	; Walk the bit
	mov    r25, r18
	rol    r25         ; move top bit into carry
	rol    r18         ; rotate

	rjmp   __ramtest_walking_bits_impl_next_start

__ramtest_walking_bits_impl_done:
	mov    r25, r17
	restore_registers(r16, r17, r18, r19, zl, zh)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- Adress test                                                  ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_adressing:
	save_registers(r16, zl, zh)

	ldi    zl, 0
	ldi    zh, 0
__ramtest_adressing_next_addr:
	; write address to address
	mov    r16, zl
	call   m4164_dram_write_byte; auto increment z
	mov    r16, zh
	call   m4164_dram_write_byte; auto increment z

	; ..., two steps back.
	sbiw   zl, 2*8

	; verify address at address
	mov    r16, zl
	call   m4164_dram_read_byte; auto increment z
	cpse   r16, r25
	rjmp   __ramtest_adressing_fail
	mov    r16, zh
	call   m4164_dram_read_byte; auto increment z
	cpse   r16, r25
	rjmp   __ramtest_adressing_fail

	; one step forward, ...
	sbiw   zl, 2*8 - 1 ; test address per-bit

	cpi    zl, 0
	brne   __ramtest_adressing_next_addr
	cpi    zh, 0
	brne   __ramtest_adressing_next_addr

	mov    r25, rC0
	rjmp   __ramtest_adressing_done

__ramtest_adressing_fail:
	mov    r25, rC1

__ramtest_adressing_done:
	restore_registers(r16, zl, zh)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- bit fade                                                     ;;
	;; r16 -- value                                                             ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_bit_fade:
	save_registers(r16)

	ldi    r16, 0b00000000
	call   ramtest_fill_memory
	call   ram_test_delay_5m
	call   ramtest_compare_memory
	cpse   r25, rC0
	rjmp   ramtest_bit_fade_fail

	ldi    r16, 0b11111111
	call   ramtest_fill_memory
	call   ram_test_delay_5m
	call   ramtest_compare_memory

ramtest_bit_fade_fail:
	restore_registers(r16)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- fill memory                                                  ;;
	;; r16 -- value                                                             ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_fill_memory:
	save_registers(zl, zh)
	ldi    zl, 0
	ldi    zh, 0
__ramtest_fill_memory_next_byte:
	call   m4164_dram_write_byte; auto increment z
	cpi    zl, 0
	brne   __ramtest_fill_memory_next_byte
	cpi    zh, 0
	brne   __ramtest_fill_memory_next_byte
	restore_registers(zl, zh)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- compare memory                                               ;;
	;; r16 -- expected value                                                    ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ramtest_compare_memory:
	save_registers(zl, zh)
	ldi    zl, 0
	ldi    zh, 0
__ramtest_compare_memory_next_byte:
	call   m4164_dram_read_byte; auto increment z
	cpse   r16, r25
	rjmp   __ramtest_compare_memory_unexpected_value
	cpi    zl, 0
	brne   __ramtest_compare_memory_next_byte
	cpi    zh, 0
	brne   __ramtest_compare_memory_next_byte

	mov    r25, rC0
	rjmp   __ramtest_compare_memory_done

__ramtest_compare_memory_unexpected_value:
	push   r25
	push   r16
	sbiw   zl, 8
	push   zl
	push   zh
	ldi    r25, low(ramtest_compare_memory_badness)
	push   r25
	ldi    r25, high(ramtest_compare_memory_badness)
	push   r25
	call   _printf
	stack_free(6, zl, zh, r25)
	mov    r25, rC1

__ramtest_compare_memory_done:
	restore_registers(zl, zh)
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

STRING_CONSTANT_N(ramtest_compare_memory_badness, 48, STRING_CONSTANT_CRLF, "at address 0x%x:", STRING_CONSTANT_CRLF, "expected %hhx, got %hhx --> ")

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- delay                                                        ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ram_test_delay_n:
	eor    zh, zh                 ;      1       1
	eor    zl, zl                 ;      1       2
	mov    r25, r16               ;      1       3
__ram_test_delay_n:
	sub    zl, rC1                ;      1       4
	sbc    zh, rC0                ;      1       5
	brne   __ram_test_delay_n     ;    1/2       5 + 65534*2 + 1 = 131074
	dec    r25                    ;
	brne   __ram_test_delay_n
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- delay short                                                  ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ram_test_delay_short:
	push   r16
	ldi    r16, 1
	call   ram_test_delay_n
	pop    r16
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- delay long                                                   ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ram_test_delay_long:
	push   r16
	ldi    r16, 10
	call   ram_test_delay_n
	pop    r16
	ret
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Ram test -- delay 5m                                                     ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ram_test_delay_5m:
	save_registers(r16, r17)
	ldi    r16, 60*2   ; 60 is about 1 second (incl. ram refresh interrupt)
	ldi    r17, 150   ; 150 * 2 ~= 300s = 5min
__ram_test_delay_5m:
	call   ram_test_delay_n
	dec    r17
	brne   __ram_test_delay_5m
	restore_registers(r16, r17)
	ret

error_trap:
	break
	debug_break(4)
	rjmp error_trap



.set string_constants_reserved_space = 512
.set string_constants_org = FLASHEND - (string_constants_reserved_space + 1)/2
.if string_constants_org < (RAMEND+1)/2
	.error "String constants must be allocated at a flash address > RAMEND"
.endif
.org string_constants_org

STRING_CONSTANT_N(welcome_message, 74, "Welcome to the m4164 memory tester v0.1", STRING_CONSTANT_CRLF, "Press any key to begin testing.", STRING_CONSTANT_CRLF);
STRING_CONSTANT_N(running_test, 13, "Test: '%s'...");
STRING_CONSTANT_N(test_passed, 9, " passed", STRING_CONSTANT_CRLF);
STRING_CONSTANT_N(test_failed, 9, " FAILED", STRING_CONSTANT_CRLF);
STRING_CONSTANT_N(test_result_passed, 72, "All %hhd tests completed successfully, this memory chip seems fine :-)", STRING_CONSTANT_CRLF);
STRING_CONSTANT_N(test_result_failed, 67, "%hhd out of %hhd tests failed, this memory chip may be broken :-(", STRING_CONSTANT_CRLF);
STRING_CONSTANT_N(crlf, 2, STRING_CONSTANT_CRLF);

string_constants_eof:
.if string_constants_eof > FLASHEND + 1
	.error "Not enough reserved space to store all string constants (ran out of flash!)"
.endif
